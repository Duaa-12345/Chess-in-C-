#include"Rook.h"

#include<iostream>
#include"windows.h"
using namespace std;
Rook::Rook(int a, int b, int c)
{
	row = a;
	col = b;
	player = c;
}
void Rook::move(Board *arr[9][9],int cr, int cc,int dr,int dc)
{
	int temp=arr[cr][cc]->getPlayer();
	bool check=true;                  
	if (arr[cr][cc]->getCode() == 1)
		{
		  if(cc==dc &&cr!=dr)
		  {
			 if(cr>dr)
			 {
				 for(int i=cr-1;i>=dr;i--)                                   //bottom to top
				 {
					if (arr[i][cc] != nullptr)
					{
						check=false;
						break;
					}
					else
					{
						check=true;
					}
			     }
			 }
			 else if(cr<dr)
			 {
				for(int i=cr+1;i<=dr;i++)                                   //top to bottom 
				{
					if (arr[i][cc] != nullptr)
					{
						check=false;
						break;
					}
					else
					{
						check=true;
					}
				 }
			}
		  }
		  else if(cr==dr &&cc!=dc)
		  {
			  if(cc<dc)
			  {
				  for(int i=cc+1;i<=dc;i++)                                   //left to right
				  {
					if (arr[cr][i] != nullptr)
					{
						check=false;
						break;
					}
					else
					{
						check=true;
					}
			      }
			  }
			  else if(cc>dc)
			  {
				  for(int i=cc-1;i>=dc;i--)                                   //left to right
				  {
					if (arr[cr][i] != nullptr)
					{
						check=false;
						break;
					}
					else
					{
						check=true;
					}
			      }
			  }

		  }
		  else
		  {
			  check=false;
		  }
			if(check==true)
			{
				arr[dr][dc]=arr[cr][cc];
				arr[cr][cc]=nullptr;
				system("cls");
				 
			}
			else
			{
				Beep(1000000,500);
				system("cls");
				cout<<"illegal move"<<endl;
				
			}

		}

}
void Rook::attack(Board *arr[9][9],int cr, int cc,int dr,int dc)
{
	int temp=arr[cr][cc]->getPlayer();
	int temp1=arr[dr][dc]->getPlayer();
	int temp2=arr[dr][dc]->getCode();
	bool check=true;
	if (arr[cr][cc]->getCode() == 1)
		{
		   if(arr[dr][dc]!=nullptr)
		   {
               if(cc==dc &&cr!=dr)
			   {
				 if(cr<dr)                           //check from top to botom
				 {
					if(cr==dr-1 )                   //check the very next row
					{
				      check=true;
					}
					else
					{
						for(int i=cr+1;i<dr;i++)
						 {
							 if(arr[i][dc]!=nullptr)
							 {
								 check=false;
								 break;
							 }
							 else
							 {
								 check=true;
							 }
				      
						 }
					}
				 }
				 else if(cr>dr)                    //check from bottom to top
				 {
					if(cr==dr+1 )                   //check the very next row
					{
				      check=true;
					}
					else
					{
						for(int i=cr-1;i>dr;i--)
						 {
							 if(arr[i][dc]!=nullptr)
							 {
								 check=false;
								 break;
							 }
							 else
							 {
								 check=true;
							 }
				      
						 }
					}
				 }
			   }
			   else if(cr==dr &&cc!=dc)                 //check from left to right
			   {
				   if(cc<dc)
				   {
					   if(cc==dc+1 )                   //check the very next coulumn
						{
							 check=true;
						}
						else
						{
							for(int i=cc+1;i<dc;i++)
							{
								 if(arr[dc][i]!=nullptr)
								 {
									 check=false;
									 break;
								 }
								 else
								 {
									check=true;
								 }
				      
						    }
					   }
				   }
				   else if(cc>dc)
				   {
					   if(cc==dc-1 )                   //check the very next coulumn
						{
							 check=true;
						}
						else
						{
							for(int i=cc-1;i>dc;i--)
							{
								 if(arr[dc][i]!=nullptr)
								 {
									 check=false;
									 break;
								 }
								 else
								 {
									check=true;
								 }
				      
						    }
					   }
				   }
			   }
			   else
				   {
					   check=false;
				   }


				 if(check==true)
				 {
					 if(temp!=temp1 && temp2==5)
					 {
						 cout<<" CHECK MATE. . player "<<temp<<" wins"<<endl;
						 Checkmate();
					 }
					  
					 arr[dr][dc]=arr[cr][cc];
					 arr[cr][cc]=nullptr;
					 //system("cls");
				 }
				 else
				 {
					 Beep(1000000,500);
					 system("cls");
					 cout<<"illegal move"<<endl;
				 }
			
			   }
			   else
			   {
				   Beep(1000000,500);
				   system("cls");
					 cout<<"illegal move"<<endl;
			   }
		  }
}
